/*
 * Copyright 2014 Florian Vogelpohl <floriantobias@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.hsos.ecs.richwps.wpsmonitor.boundary.gui.elements.process;

import de.hsos.ecs.richwps.wpsmonitor.boundary.gui.WpsMonitorAdminGui;
import de.hsos.ecs.richwps.wpsmonitor.boundary.gui.utils.MessageDialogs;
import de.hsos.ecs.richwps.wpsmonitor.data.entity.WpsEntity;
import de.hsos.ecs.richwps.wpsmonitor.data.entity.WpsProcessEntity;
import de.hsos.ecs.richwps.wpsmonitor.util.Validate;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JDialog;

/**
 * Dialog to show and allow operations on WpsProcessEntities and
 * {@link WpsProcessEntity} Jobs.
 *
 * @author Florian Vogelpohl <floriantobias@gmail.com>
 */
public class WpsProcessDialog extends JDialog {

    private final WpsMonitorAdminGui monitorMainFrame;
    private final WpsEntity wps;

    /**
     * Creates a new WpsProcessDialog instance.
     *
     * @param monitorMainFrame Reference to the WpsMonitorAdminGui of this gui
     * @param wps {@link WpsEntity} to request the right data from the monitor
     */
    public WpsProcessDialog(final WpsMonitorAdminGui monitorMainFrame, final WpsEntity wps) {
        super(monitorMainFrame, true);
        this.wps = wps;
        this.monitorMainFrame = Validate.notNull(monitorMainFrame, "mainFrame");

        initComponents();
        init();
    }

    private void init() {
        setName(wps.getIdentifier() + "ProcessDialog");
        setTitle(getTitle() + " of " + wps.getIdentifier());
        List<WpsProcessEntity> processesOfWps = monitorMainFrame.getMonitorReference()
                .getMonitorControl()
                .getProcessesOfWps(wps);

        for (WpsProcessEntity processEntity : processesOfWps) {
            WpsProcessPanel processPane = createSavedProcessPanel(processEntity);
            addProcessPane.add(processPane);
        }

        addProcessPane.revalidate();
    }

    /**
     * reinit the dialog. Re-request the monitor for the necessary data.
     */
    public void reInit() {
        addProcessPane.removeAll();
        init();
        revalidate();
        repaint();
    }

    /**
     * Adds a new Process.
     *
     * @param processName
     */
    public void addProcess(final String processName) {
        WpsProcessEntity p = new WpsProcessEntity(processName, wps);

        WpsProcessPanel pPanel = createAndAddProcessPanel(p);
        pPanel.saveProcess();
    }

    private Boolean isNotEmptyProcessName() {
        return !"".equals(processIdentifierInput.getText().trim());
    }

    private WpsProcessPanel createProcessPanel(WpsProcessEntity processEntity) {
        return new WpsProcessPanel(monitorMainFrame, addProcessPane, processEntity);
    }

    private WpsProcessPanel createSavedProcessPanel(WpsProcessEntity processEntity) {
        return new WpsProcessPanel(monitorMainFrame, addProcessPane, processEntity, true);
    }

    private void addProcessPanel(WpsProcessPanel panel) {
        addProcessPane.add(panel, BorderLayout.SOUTH);
        addProcessPane.revalidate();
    }

    private WpsProcessPanel createAndAddProcessPanel(WpsProcessEntity processEntity) {
        WpsProcessPanel panel = createProcessPanel(processEntity);
        addProcessPanel(panel);

        return panel;
    }

    @Override
    public void setVisible(boolean b) {
        setLocationRelativeTo(monitorMainFrame);

        super.setVisible(b);
    }

    private Boolean processAlreadyRegistred(final String processName) {
        return monitorMainFrame.getMonitorReference()
                .getMonitorControl()
                .isProcessExists(wps.getIdentifier(), processName);
    }

    private Boolean isNotSavedWithSameNameExists(final String processName) {
        Component[] components = addProcessPane.getComponents();

        for (int i = 0; i < addProcessPane.getComponentCount(); i++) {
            if (components[i] instanceof WpsProcessPanel) {
                WpsProcessPanel p = (WpsProcessPanel) components[i];
                
                return p.getWpsProcess().getIdentifier().equals(processName);
            }
        }

        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel decoPanel = new javax.swing.JPanel();
        javax.swing.JLabel processIdentifierDecoText = new javax.swing.JLabel();
        processIdentifierInput = new javax.swing.JTextField();
        addProcessButton = new javax.swing.JButton();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        wpsProcessScrollPane = new javax.swing.JScrollPane();
        addProcessPane = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manage Processes");
        setIconImage(new ImageIcon(getClass().getResource("/icons/manage.png")).getImage());
        setResizable(false);

        decoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Add Process to WPS"));

        processIdentifierDecoText.setText("Process-Identifier");

        processIdentifierInput.setName("processIdentifierInput"); // NOI18N
        processIdentifierInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processIdentifierInputActionPerformed(evt);
            }
        });

        addProcessButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add.png"))); // NOI18N
        addProcessButton.setText("Add Process");
        addProcessButton.setName("addProcessButton"); // NOI18N
        addProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProcessButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout decoPanelLayout = new javax.swing.GroupLayout(decoPanel);
        decoPanel.setLayout(decoPanelLayout);
        decoPanelLayout.setHorizontalGroup(
            decoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(decoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(processIdentifierDecoText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(processIdentifierInput, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addProcessButton)
                .addContainerGap())
        );
        decoPanelLayout.setVerticalGroup(
            decoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(decoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(decoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addProcessButton)
                    .addComponent(processIdentifierDecoText)
                    .addComponent(processIdentifierInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Registred Processes"));

        wpsProcessScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        wpsProcessScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        addProcessPane.setBackground(new java.awt.Color(255, 255, 255));
        addProcessPane.setName("addProcessPane"); // NOI18N
        addProcessPane.setLayout(new javax.swing.BoxLayout(addProcessPane, javax.swing.BoxLayout.PAGE_AXIS));
        wpsProcessScrollPane.setViewportView(addProcessPane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(wpsProcessScrollPane)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(wpsProcessScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addContainerGap())
        );

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/apply.png"))); // NOI18N
        closeButton.setText("Close");
        closeButton.setName("closeButton"); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(decoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(closeButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(decoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addProcessButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_addProcessButtonActionPerformed

        if (isNotEmptyProcessName()) {

            String wpsProcessIdentifier = processIdentifierInput.getText();
            try {
                if (!isNotSavedWithSameNameExists(wpsProcessIdentifier) && !processAlreadyRegistred(wpsProcessIdentifier)) {
                    processIdentifierInput.setText("");
                    WpsProcessEntity wpsProcessEntity = new WpsProcessEntity(wpsProcessIdentifier, wps);

                    createAndAddProcessPanel(wpsProcessEntity);
                } else {
                    MessageDialogs.showError(this,
                            "Already registered",
                            "The process is already registered in the monitor. Please choose another process identifier."
                    );
                }
            } catch (IllegalArgumentException ex) {
                MessageDialogs.showError(this,
                        "The given Processname is not valid!",
                        ex.getMessage()
                );
            }
        }
    }//GEN-LAST:event_addProcessButtonActionPerformed

    private void processIdentifierInputActionPerformed(ActionEvent evt) {//GEN-FIRST:event_processIdentifierInputActionPerformed
        addProcessButtonActionPerformed(evt);
    }//GEN-LAST:event_processIdentifierInputActionPerformed

    private void closeButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProcessButton;
    private javax.swing.JPanel addProcessPane;
    private javax.swing.JButton closeButton;
    private javax.swing.JTextField processIdentifierInput;
    private javax.swing.JScrollPane wpsProcessScrollPane;
    // End of variables declaration//GEN-END:variables
}
