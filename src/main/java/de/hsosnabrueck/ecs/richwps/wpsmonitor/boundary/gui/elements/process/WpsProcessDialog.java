/*
 * Copyright 2014 Florian Vogelpohl <floriantobias@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.hsosnabrueck.ecs.richwps.wpsmonitor.boundary.gui.elements.process;

import de.hsosnabrueck.ecs.richwps.wpsmonitor.boundary.gui.elements.WpsMonitorGui;
import de.hsosnabrueck.ecs.richwps.wpsmonitor.data.entity.WpsEntity;
import de.hsosnabrueck.ecs.richwps.wpsmonitor.data.entity.WpsProcessEntity;
import de.hsosnabrueck.ecs.richwps.wpsmonitor.util.Validate;
import java.awt.BorderLayout;
import java.util.List;
import javax.swing.ImageIcon;

/**
 * Dialog to show and allow operations on {@link WpsProcessEntities} and
 * {@link WPsProcessEntity} Jobs.
 *
 * @author Florian Vogelpohl <floriantobias@gmail.com>
 */
public class WpsProcessDialog extends javax.swing.JDialog {

    private final WpsMonitorGui monitorMainFrame;
    private final WpsEntity wps;

    /**
     * Constructor.
     *
     * @param monitorMainFrame Reference to the WpsMonitorGui of this gui
     * @param wps {@link WpsEntity} to request the right data from the monitor
     * @param modal true for modal form
     */
    public WpsProcessDialog(WpsMonitorGui monitorMainFrame, WpsEntity wps, boolean modal) {
        super(monitorMainFrame, modal);
        this.wps = wps;
        this.monitorMainFrame = Validate.notNull(monitorMainFrame, "mainFrame");

        initComponents();

        setLocationRelativeTo(monitorMainFrame);

        init();
    }

    private void init() {
        List<WpsProcessEntity> processesOfWps = monitorMainFrame.getMonitorReference()
                .getMonitorControl()
                .getProcessesOfWps(wps);

        for (WpsProcessEntity processEntity : processesOfWps) {
            WpsProcessPanel processPane = createSavedProcessPanel(processEntity);
            addProcessPane.add(processPane);
        }

        addProcessPane.revalidate();
    }

    /**
     * reinit the dialog. Re-request the monitor for the necessary data.
     */
    public void reInit() {
        addProcessPane.removeAll();
        init();
        revalidate();
        repaint();
    }

    private Boolean isNotEmptyProcessName() {
        return !processIdentifierInput
                .getText()
                .trim()
                .equalsIgnoreCase("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel decoPanel = new javax.swing.JPanel();
        javax.swing.JLabel processIdentifierDecoText = new javax.swing.JLabel();
        processIdentifierInput = new javax.swing.JTextField();
        createNewProcessButton = new javax.swing.JButton();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        wpsProcessScrollPane = new javax.swing.JScrollPane();
        addProcessPane = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add or edit Process");
        setIconImage(new ImageIcon(getClass().getResource("/icons/add.png")).getImage());
        setResizable(false);

        decoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Add Process to WPS"));

        processIdentifierDecoText.setText("Process Identifier");

        processIdentifierInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processIdentifierInputActionPerformed(evt);
            }
        });

        createNewProcessButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add.png"))); // NOI18N
        createNewProcessButton.setText("Create new Process");
        createNewProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewProcessButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout decoPanelLayout = new javax.swing.GroupLayout(decoPanel);
        decoPanel.setLayout(decoPanelLayout);
        decoPanelLayout.setHorizontalGroup(
            decoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(decoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(processIdentifierDecoText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(processIdentifierInput, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(createNewProcessButton)
                .addContainerGap())
        );
        decoPanelLayout.setVerticalGroup(
            decoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(decoPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(decoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createNewProcessButton)
                    .addComponent(processIdentifierDecoText)
                    .addComponent(processIdentifierInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Registred Processes"));

        wpsProcessScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        wpsProcessScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        addProcessPane.setLayout(new javax.swing.BoxLayout(addProcessPane, javax.swing.BoxLayout.PAGE_AXIS));
        wpsProcessScrollPane.setViewportView(addProcessPane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(wpsProcessScrollPane)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(wpsProcessScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                .addContainerGap())
        );

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/apply.png"))); // NOI18N
        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(decoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(closeButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(decoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createNewProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewProcessButtonActionPerformed
        if (isNotEmptyProcessName()) {
            String wpsProcessIdentifier = processIdentifierInput.getText();
            processIdentifierInput.setText("");

            WpsProcessEntity wpsProcessEntity = new WpsProcessEntity(wpsProcessIdentifier, wps);

            createAndAddProcessPanel(wpsProcessEntity);
        }
    }//GEN-LAST:event_createNewProcessButtonActionPerformed

    private WpsProcessPanel createProcessPanel(WpsProcessEntity processEntity) {
        return new WpsProcessPanel(monitorMainFrame, addProcessPane, processEntity);
    }

    private WpsProcessPanel createSavedProcessPanel(WpsProcessEntity processEntity) {
        return new WpsProcessPanel(monitorMainFrame, addProcessPane, processEntity, true);
    }

    private void addProcessPanel(WpsProcessPanel panel) {
        addProcessPane.add(panel, BorderLayout.SOUTH);
        addProcessPane.revalidate();
    }

    private WpsProcessPanel createAndAddProcessPanel(WpsProcessEntity processEntity) {
        WpsProcessPanel panel = createProcessPanel(processEntity);
        addProcessPanel(panel);

        return panel;
    }
    
    public void addProcess(String processName) {
        WpsProcessEntity p = new WpsProcessEntity(processName, wps);
        
        WpsProcessPanel pPanel = createAndAddProcessPanel(p);
        pPanel.saveProcess();
    }

    private void processIdentifierInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processIdentifierInputActionPerformed
        createNewProcessButtonActionPerformed(evt);
    }//GEN-LAST:event_processIdentifierInputActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addProcessPane;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton createNewProcessButton;
    private javax.swing.JTextField processIdentifierInput;
    private javax.swing.JScrollPane wpsProcessScrollPane;
    // End of variables declaration//GEN-END:variables
}
